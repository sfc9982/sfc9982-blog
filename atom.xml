<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>sfc9982&#39;s blog</title>
  
  <subtitle>Sci &amp; Tech Blog</subtitle>
  <link href="https://googles.plus/atom.xml" rel="self"/>
  
  <link href="https://googles.plus/"/>
  <updated>2023-08-28T03:26:03.947Z</updated>
  <id>https://googles.plus/</id>
  
  <author>
    <name>sfc9982</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>分支预测</title>
    <link href="https://googles.plus/2023/08/28/fen-zhi-yu-ce/"/>
    <id>https://googles.plus/2023/08/28/fen-zhi-yu-ce/</id>
    <published>2023-08-28T03:19:59.000Z</published>
    <updated>2023-08-28T03:26:03.947Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;请看这样一段代码&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-cpp&quot; data-language=&quot;cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;token macro</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>我们终将一战 - 里根</title>
    <link href="https://googles.plus/2023/08/15/wo-men-zhong-jiang-yi-zhan-li-gen/"/>
    <id>https://googles.plus/2023/08/15/wo-men-zhong-jiang-yi-zhan-li-gen/</id>
    <published>2023-08-15T10:23:59.000Z</published>
    <updated>2023-08-17T18:12:03.744Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;让我把话说清楚，在战争与和平之间选择的结果已毫无争议可言，但是有一个方法，可以实现绝对的和平，而且你在下一秒就可以获得和平，那就是投降。&lt;/p&gt;
&lt;p&gt;必须承认，除了投降之外的所有道路都需要我们冒着未知的危险。但是历史上无数的事实告诉我们，姑息养恶、后患无穷，而这正是我们一</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>浅谈虚拟化技术难点</title>
    <link href="https://googles.plus/2023/08/14/qian-tan-xu-ni-hua-ji-zhu-nan-dian/"/>
    <id>https://googles.plus/2023/08/14/qian-tan-xu-ni-hua-ji-zhu-nan-dian/</id>
    <published>2023-08-14T03:05:06.000Z</published>
    <updated>2023-08-14T03:20:29.692Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;VMM 在 2006 年之后的确变简单了。1998年之前的 x86
是号称无法完全虚拟化的，然后“某几个人”搞了出来，于是就有了 VMware。&lt;/p&gt;
&lt;p&gt;早期 VMM 难以实现的原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最大难题：x86 的某些指令，在非 ring 0</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>WSL 与 WINE: Subsystem 与 API 翻译</title>
    <link href="https://googles.plus/2023/08/13/wsl-yu-wine-subsystem-yu-api-fan-yi/"/>
    <id>https://googles.plus/2023/08/13/wsl-yu-wine-subsystem-yu-api-fan-yi/</id>
    <published>2023-08-13T10:11:47.000Z</published>
    <updated>2023-08-13T10:15:30.591Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;WSL 对于 Windows 系统来说属于用户态程序，通过虚拟文件系统接口，以
DriveFs 文件系统挂载到 Windows 从而提供和 Windows 的互操作能力。
lxss.sys 和 lxcore.sys 这两个驱动负责模拟</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>C++ 模板元编程</title>
    <link href="https://googles.plus/2023/08/13/c-mo-ban-yuan-bian-cheng/"/>
    <id>https://googles.plus/2023/08/13/c-mo-ban-yuan-bian-cheng/</id>
    <published>2023-08-13T10:10:17.000Z</published>
    <updated>2023-08-13T10:10:52.316Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>C++ Compare float values</title>
    <link href="https://googles.plus/2023/07/27/c-compare-float-values/"/>
    <id>https://googles.plus/2023/07/27/c-compare-float-values/</id>
    <published>2023-07-27T07:05:56.000Z</published>
    <updated>2023-07-27T07:07:24.761Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;foreword&quot;&gt;Foreword&lt;/h2&gt;
&lt;p&gt;We want to compare two obviously equal floating point values
(something like 3.456) in C++ but we</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CRT 检测内存泄露</title>
    <link href="https://googles.plus/2023/07/26/crt-jian-ce-nei-cun-xie-lu/"/>
    <id>https://googles.plus/2023/07/26/crt-jian-ce-nei-cun-xie-lu/</id>
    <published>2023-07-26T14:18:03.000Z</published>
    <updated>2023-07-26T14:18:46.793Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;ul&gt;
&lt;li&gt;定义宏_CRTDBG_MAP_ALLOC_&lt;/li&gt;
&lt;li&gt;包含头文件crtdbg.h&lt;/li&gt;
&lt;li&gt;调用_CrtDumpMemoryLeaks&lt;/li&gt;
&lt;li&gt;需要在Debug模式：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Clang 比 GCC 好在哪里？</title>
    <link href="https://googles.plus/2023/07/26/clang-bi-gcc-hao-zai-na-li/"/>
    <id>https://googles.plus/2023/07/26/clang-bi-gcc-hao-zai-na-li/</id>
    <published>2023-07-26T11:42:58.000Z</published>
    <updated>2023-07-26T11:43:38.212Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;作者：Incredibuild
链接：https://www.zhihu.com/question/20235742/answer/3105870528
来源：知乎&lt;/p&gt;
&lt;p&gt;在《Effective C++》一书中，Scott Meyers 谈到了使用 lhs 和</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>在 C++ 项目中使用 Google Test &amp; Benchmark</title>
    <link href="https://googles.plus/2023/07/19/zai-c-xiang-mu-zhong-shi-yong-google-test-benchmark/"/>
    <id>https://googles.plus/2023/07/19/zai-c-xiang-mu-zhong-shi-yong-google-test-benchmark/</id>
    <published>2023-07-19T02:25:45.000Z</published>
    <updated>2023-07-19T02:42:27.551Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;编译安装&quot;&gt;编译安装&lt;/h2&gt;
&lt;p&gt;Google Test/Benchmark 是基于 CMake
构建的。跨平台支持非常的好，Windows 可以使用 nmake 编译安装，默认会在
&lt;code&gt;Program Files&lt;/code&gt;</summary>
        
      
    
    
    
    
    <category term="C/C++" scheme="https://googles.plus/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>GraalVM 编译期引用 msvc</title>
    <link href="https://googles.plus/2023/06/27/graalvm-bian-yi-qi-yin-yong-msvc/"/>
    <id>https://googles.plus/2023/06/27/graalvm-bian-yi-qi-yin-yong-msvc/</id>
    <published>2023-06-27T08:19:06.000Z</published>
    <updated>2023-07-19T02:09:29.805Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;使用 GraalVM JDK 中的 &lt;code&gt;native-image&lt;/code&gt;
编译原生应用时，如果使用 jabba 之类的 SDK
管理器的话，环境变量管理可能会与 Visual Studio
的开发人员工具环境起冲突，无法同时共用两个。&lt;/p&gt;
&lt;p&gt;可以在</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>去除 Google 搜索结果重定向</title>
    <link href="https://googles.plus/2023/06/15/qu-chu-google-sou-suo-jie-guo-chong-ding-xiang/"/>
    <id>https://googles.plus/2023/06/15/qu-chu-google-sou-suo-jie-guo-chong-ding-xiang/</id>
    <published>2023-06-15T09:02:51.000Z</published>
    <updated>2023-07-19T02:09:29.822Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;安装 https://ublockorigin.com/&lt;/li&gt;
&lt;li&gt;开启 &lt;code&gt;uBlock filters -</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>podman 容器作为服务管理</title>
    <link href="https://googles.plus/2023/06/11/podman-rong-qi-zuo-wei-fu-wu-guan-li/"/>
    <id>https://googles.plus/2023/06/11/podman-rong-qi-zuo-wei-fu-wu-guan-li/</id>
    <published>2023-06-11T09:31:58.000Z</published>
    <updated>2023-07-19T02:09:29.816Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;创建服务配置&quot;&gt;创建服务配置&lt;/h2&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token</summary>
        
      
    
    
    
    
    <category term="云原生" scheme="https://googles.plus/tags/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    <category term="podman" scheme="https://googles.plus/tags/podman/"/>
    
    <category term="Linux" scheme="https://googles.plus/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>sudo 中的 alias</title>
    <link href="https://googles.plus/2023/06/11/sudo-zhong-de-alias/"/>
    <id>https://googles.plus/2023/06/11/sudo-zhong-de-alias/</id>
    <published>2023-06-11T09:05:46.000Z</published>
    <updated>2023-07-19T02:09:29.816Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://www.gnu.org/software/bash/manual/bashref.html#Aliases&quot;&gt;Bash
Manaul&lt;/a&gt; 中写到：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Aliases allow a string</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>人类从历史中学到的唯一教训</title>
    <link href="https://googles.plus/2023/06/09/ren-lei-cong-li-shi-zhong-xue-dao-de-wei-yi-jiao-xun/"/>
    <id>https://googles.plus/2023/06/09/ren-lei-cong-li-shi-zhong-xue-dao-de-wei-yi-jiao-xun/</id>
    <published>2023-06-08T16:26:02.000Z</published>
    <updated>2023-07-19T02:09:29.818Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h3 id=&quot;原文&quot;&gt;原文&lt;/h3&gt;
&lt;p&gt;But what experience and history teach is this – that nations and
goverments have never learned anything from history</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>docker 容器端口绕过 firewalld 防火墙解决方案</title>
    <link href="https://googles.plus/2023/05/18/docker-rong-qi-duan-kou-rao-guo-firewalld-fang-huo-qiang-jie-jue-fang-an/"/>
    <id>https://googles.plus/2023/05/18/docker-rong-qi-duan-kou-rao-guo-firewalld-fang-huo-qiang-jie-jue-fang-an/</id>
    <published>2023-05-18T11:19:14.000Z</published>
    <updated>2023-07-19T02:09:29.814Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;docker-容器端口绕过-firewalld-防火墙解决方案&quot;&gt;docker
容器端口绕过 firewalld 防火墙解决方案&lt;/h1&gt;
&lt;h2 id=&quot;docker-不使用-iptables&quot;&gt;docker 不使用 iptables&lt;/h2&gt;
&lt;p&gt;在</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Oracle SQL Developer 美化</title>
    <link href="https://googles.plus/2023/04/24/oracle-sql-developer-mei-hua/"/>
    <id>https://googles.plus/2023/04/24/oracle-sql-developer-mei-hua/</id>
    <published>2023-04-24T10:51:12.000Z</published>
    <updated>2023-07-19T02:09:29.808Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;配置目录 &lt;code&gt;&#92;sqldeveloper&#92;bin&#92;sqldeveloper.conf&lt;/code&gt;, Linux</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>记一次 Hikvision Pentest</title>
    <link href="https://googles.plus/2023/04/24/ji-yi-ci-hikvision-pentest/"/>
    <id>https://googles.plus/2023/04/24/ji-yi-ci-hikvision-pentest/</id>
    <published>2023-04-24T10:08:24.000Z</published>
    <updated>2023-07-19T02:09:29.831Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2</summary>
        
      
    
    
    
    
    <category term="CTF" scheme="https://googles.plus/tags/CTF/"/>
    
    <category term="Pentest" scheme="https://googles.plus/tags/Pentest/"/>
    
  </entry>
  
  <entry>
    <title>C++ 实现高精度浮点运算</title>
    <link href="https://googles.plus/2023/04/24/c-shi-xian-gao-jing-du-fu-dian-yun-suan/"/>
    <id>https://googles.plus/2023/04/24/c-shi-xian-gao-jing-du-fu-dian-yun-suan/</id>
    <published>2023-04-24T04:43:49.000Z</published>
    <updated>2023-07-19T02:09:29.800Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;c-实现高精度浮点运算&quot;&gt;C++ 实现高精度浮点运算&lt;/h1&gt;
&lt;p&gt;（注意：本文已经默认您了解了 IEEE-754 标准！）&lt;/p&gt;
&lt;p&gt;Boost 是一个开源的 C++ 库集合，它提供了许多高效的算法和工具，用于解决
C++</summary>
        
      
    
    
    
    
    <category term="C++" scheme="https://googles.plus/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>WOFF Web 字体二三事</title>
    <link href="https://googles.plus/2023/04/15/woff-web-zi-ti-er-san-shi/"/>
    <id>https://googles.plus/2023/04/15/woff-web-zi-ti-er-san-shi/</id>
    <published>2023-04-15T06:33:38.000Z</published>
    <updated>2023-07-19T02:09:29.812Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;web-open-font-format&quot;&gt;Web Open Font Format&lt;/h1&gt;
&lt;p&gt;Web开放字体格式（Web Open</summary>
        
      
    
    
    
    
    <category term="Web" scheme="https://googles.plus/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Wireshark BPF 捕获过滤器</title>
    <link href="https://googles.plus/2023/04/15/wireshark-bpf-bu-huo-guo-lu-qi/"/>
    <id>https://googles.plus/2023/04/15/wireshark-bpf-bu-huo-guo-lu-qi/</id>
    <published>2023-04-15T06:17:07.000Z</published>
    <updated>2023-07-19T02:09:29.814Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;wireshark-bpf-捕获过滤器&quot;&gt;Wireshark BPF 捕获过滤器&lt;/h1&gt;
&lt;p&gt;Wireshark 中，如果要过滤出所有的 POST 或者是 GET
请求，我们可以用显示过滤器里的</summary>
        
      
    
    
    
    
    <category term="Wireshark" scheme="https://googles.plus/tags/Wireshark/"/>
    
  </entry>
  
</feed>
